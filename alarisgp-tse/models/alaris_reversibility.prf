(alaris_reversibility_pattern
 (divbynratesndx 0
  (divbynratesndx-1 nil 3658154880 ("" (grind) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   shostak))
 (divbynratespndx 0
  (divbynratespndx-1 nil 3659165451
   ("" (skosimp*) (("" (grind) nil nil)) nil)
   ((nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   shostak))
 (divbynrealndx 0
  (divbynrealndx-1 nil 3659167760 ("" (grind) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   shostak))
 (divbynrealpndx 0
  (divbynrealpndx-1 nil 3659167797 ("" (grind) nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   shostak))
 (range_time_ud_TCC1 0
  (range_time_ud_TCC1-1 nil 3659185769 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (range_time_ud_TCC2 0
  (range_time_ud_TCC2-1 nil 3659185769 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (range_time_ud_f_TCC1 0
  (range_time_ud_f_TCC1-1 nil 3659268729 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (range_time_ud_f_TCC2 0
  (range_time_ud_f_TCC2-1 nil 3659268729 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (range_time_du_TCC1 0
  (range_time_du_TCC1-1 nil 3659185769 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (range_time_du_TCC2 0
  (range_time_du_TCC2-1 nil 3659185769 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (range_time_du_f_TCC1 0
  (range_time_du_f_TCC1-1 nil 3659268729 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (range_time_du_f_TCC2 0
  (range_time_du_f_TCC2-1 nil 3659268729 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (simpleupdown_TCC1 0
  (simpleupdown_TCC1-1 nil 3657975481 ("" (subtype-tcc) nil nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (low_range_rate const-decl "boolean" alaris_reversibility_pattern
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (simpleupdown_TCC2 0
  (simpleupdown_TCC2-1 nil 3657975481 ("" (subtype-tcc) nil nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (mid_range_rate const-decl "boolean" alaris_reversibility_pattern
     nil)
    (low_range_rate const-decl "boolean" alaris_reversibility_pattern
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (simpleupdown_TCC3 0
  (simpleupdown_TCC3-1 nil 3657975481 ("" (subtype-tcc) nil nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (high_range_rate const-decl "boolean" alaris_reversibility_pattern
     nil)
    (mid_range_rate const-decl "boolean" alaris_reversibility_pattern
     nil)
    (low_range_rate const-decl "boolean" alaris_reversibility_pattern
     nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (simpleupdown 0
  (simpleupdown-1 nil 3657975482
   ("" (skosimp*) (("" (grind) nil nil)) nil)
   ((nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (low_range_rate const-decl "boolean" alaris_reversibility_pattern
     nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (state_dn_rate const-decl "irates" alaris_th nil)
    (state_up_rate const-decl "irates" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (mid_range_rate const-decl "boolean" alaris_reversibility_pattern
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (high_range_rate const-decl "boolean" alaris_reversibility_pattern
     nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (simpleUPDOWNd 0
  (simpleUPDOWNd-1 nil 3658146686
   ("" (skosimp*)
    (("" (split)
      (("1" (grind)
        (("1" (lemma "floor_plus_int")
          (("1" (inst? :subst (x "v!1" i -d!1))
            (("1" (replace -1 1) (("1" (assert) nil nil)) nil)
             ("2" (lemma "floor_plus_int")
              (("2" (inst? :subst (x "v!1" i -d!1))
                (("1" (replace -1 2) (("1" (assert) nil nil)) nil)
                 ("2" (all-typepreds) (("2" (grind) nil nil)) nil)
                 ("3" (all-typepreds) (("3" (grind) nil nil)) nil))
                nil))
              nil)
             ("3" (all-typepreds) (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (lemma "floor_plus_int")
        (("2" (inst? :subst (x "v!1" i -d!1))
          (("1" (grind) nil nil)
           ("2" (all-typepreds) (("2" (grind) nil nil)) nil)
           ("3" (all-typepreds) (("3" (grind) nil nil)) nil))
          nil))
        nil)
       ("3" (lemma "floor_plus_int")
        (("3" (inst? :subst (x "v!1" i -d!1))
          (("1" (all-typepreds) (("1" (grind) nil nil)) nil)
           ("2" (all-typepreds) (("2" (grind) nil nil)) nil)
           ("3" (all-typepreds) (("3" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((floor_plus_int formula-decl nil floor_ceil nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (even? const-decl "bool" integers nil)
    (strict_total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (integer nonempty-type-from-decl nil integers nil) nil
    (steprate type-eq-decl nil types_and_constants_th nil)
    (bigstep const-decl "nat" types_and_constants_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_UP_rate const-decl "irates" alaris_th nil)
    (state_DN_rate const-decl "irates" alaris_th nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (low_range_rate_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (mid_range_rate_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (high_range_rate_f const-decl "boolean"
     alaris_reversibility_pattern nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   shostak))
 (Simpledownup_TCC1 0
  (Simpledownup_TCC1-1 nil 3659161116 ("" (subtype-tcc) nil nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (low_range_rate_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (Simpledownup_TCC2 0
  (Simpledownup_TCC2-1 nil 3659161116 ("" (subtype-tcc) nil nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (mid_range_rate_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (low_range_rate_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (Simpledownup_TCC3 0
  (Simpledownup_TCC3-1 nil 3659161116 ("" (subtype-tcc) nil nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (high_range_rate_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (mid_range_rate_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (low_range_rate_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (Simpledownup 0
  (Simpledownup-1 nil 3659161117
   ("" (skosimp*)
    (("" (split)
      (("1" (grind) nil nil) ("2" (grind) nil nil)
       ("3" (grind) nil nil))
      nil))
    nil)
   ((even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_dn_rate const-decl "irates" alaris_th nil)
    (state_up_rate const-decl "irates" alaris_th nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (low_range_rate_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (mid_range_rate_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (high_range_rate_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (SimpleDOWNUPd 0
  (SimpleDOWNUPd-1 nil 3659163762
   ("" (skosimp*)
    (("" (split)
      (("1" (grind)
        (("1" (all-typepreds)
          (("1" (lemma "ceiling_plus_int")
            (("1" (inst? :subst (x "v!1" i d!1))
              (("1" (replace -1 1) (("1" (assert) nil nil)) nil)
               ("2" (assert) nil nil) ("3" (assert) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (all-typepreds)
        (("2" (lemma "ceiling_plus_int")
          (("2" (inst? :subst (x "v!1" i d!1))
            (("1" (grind) nil nil)
             ("2" (assert) (("2" (grind) nil nil)) nil)
             ("3" (grind) nil nil))
            nil))
          nil))
        nil)
       ("3" (grind)
        (("1" (all-typepreds) (("1" (grind) nil nil)) nil)
         ("2" (all-typepreds) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (bigstep const-decl "nat" types_and_constants_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (even? const-decl "bool" integers nil)
    (strict_total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil) nil
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ceiling_plus_int formula-decl nil floor_ceil nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_DN_rate const-decl "irates" alaris_th nil)
    (state_UP_rate const-decl "irates" alaris_th nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (low_range_rate_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (mid_range_rate_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil (total_order? const-decl "bool" orders nil)
    (irreflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (strict_order? const-decl "bool" orders nil)
    (trichotomous? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (high_range_rate_duf const-decl "boolean"
     alaris_reversibility_pattern nil))
   shostak))
 (simpleupdownvtbi_TCC1 0
  (simpleupdownvtbi_TCC1-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (low_range_vols const-decl "boolean" alaris_reversibility_pattern
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (simpleupdownvtbi_TCC2 0
  (simpleupdownvtbi_TCC2-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (mid_range_vols const-decl "boolean" alaris_reversibility_pattern
     nil)
    (low_range_vols const-decl "boolean" alaris_reversibility_pattern
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (simpleupdownvtbi_TCC3 0
  (simpleupdownvtbi_TCC3-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (high_range_vols const-decl "boolean" alaris_reversibility_pattern
     nil)
    (mid_range_vols const-decl "boolean" alaris_reversibility_pattern
     nil)
    (low_range_vols const-decl "boolean" alaris_reversibility_pattern
     nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (simpleupdownvtbi 0
  (simpleupdownvtbi-1 nil 3659171254 ("" (grind) nil nil)
   ((nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (high_range_vols const-decl "boolean" alaris_reversibility_pattern
     nil)
    (mid_range_vols const-decl "boolean" alaris_reversibility_pattern
     nil)
    (state_up_vtbi const-decl "ivols" alaris_th nil)
    (state_dn_vtbi const-decl "ivols" alaris_th nil)
    (trim_vtbi const-decl "ivols" alaris_th nil)
    (low_range_vols const-decl "boolean" alaris_reversibility_pattern
     nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ivols type-eq-decl nil types_and_constants_th nil))
   shostak))
 (simpleUPDOWNdvtbi 0
  (simpleUPDOWNdvtbi-1 nil 3659171467 ("" (grind) nil nil)
   ((nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (high_range_vols_f const-decl "boolean"
     alaris_reversibility_pattern nil)
    (mid_range_vols_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (state_UP_vtbi const-decl "ivols" alaris_th nil)
    (state_DN_vtbi const-decl "ivols" alaris_th nil)
    (trim_vtbi const-decl "ivols" alaris_th nil)
    (low_range_vols_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bigstep const-decl "nat" types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil))
   shostak))
 (Simpledownupvtbi_TCC1 0
  (Simpledownupvtbi_TCC1-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (low_range_vols_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (Simpledownupvtbi_TCC2 0
  (Simpledownupvtbi_TCC2-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (mid_range_vols_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (low_range_vols_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (Simpledownupvtbi_TCC3 0
  (Simpledownupvtbi_TCC3-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (high_range_vols_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (mid_range_vols_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (low_range_vols_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (Simpledownupvtbi 0
  (Simpledownupvtbi-1 nil 3659171524
   ("" (skosimp*)
    (("" (split)
      (("1" (expand "low_range_vols_du")
        (("1" (grind)
          (("1" (all-typepreds) (("1" (assert) nil nil)) nil)
           ("2" (all-typepreds) (("2" (assert) nil nil)) nil)
           ("3" (lemma "floor_plus_int")
            (("3" (inst? :subst (i 1 x "10*v!1"))
              (("3" (replace -1 2)
                (("3" (replace -4 2)
                  (("3" (lemma "ceiling_plus_int")
                    (("3" (inst? :subst (i 1 x "10*v!1"))
                      (("3" (replace -1 2)
                        (("3" (replace -6 2) (("3" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (grind) nil nil) ("3" (grind) nil nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (high_range_vols_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (mid_range_vols_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (low_range_vols_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (ceiling_plus_int formula-decl nil floor_ceil nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd? const-decl "bool" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (even? const-decl "bool" integers nil)
    (strict_total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state_dn_vtbi const-decl "ivols" alaris_th nil)
    (state_up_vtbi const-decl "ivols" alaris_th nil)
    (trim_vtbi const-decl "ivols" alaris_th nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   shostak))
 (SimpleDOWNUPdvtbi 0
  (SimpleDOWNUPdvtbi-1 nil 3659172559
   ("" (skosimp*)
    (("" (grind)
      (("1" (lemma "ceiling_plus_int")
        (("1" (inst? :subst (i "d!1" x "v!1"))
          (("1" (replace -1 1)
            (("1" (replace -5 1) (("1" (propax) nil nil)) nil)) nil)
           ("2" (lemma "ceiling_plus_int")
            (("2" (inst? :subst (i "d!1" x "v!1"))
              (("1" (replace -1 2)
                (("1" (replace -5 2) (("1" (propax) nil nil)) nil))
                nil)
               ("2" (lemma "ceiling_plus_int")
                (("2" (inst? :subst (i "d!1" x "v!1"))
                  (("1" (replace -1 3)
                    (("1" (replace -5 3) (("1" (propax) nil nil)) nil))
                    nil)
                   ("2" (all-typepreds) (("2" (assert) nil nil)) nil)
                   ("3" (all-typepreds) (("3" (assert) nil nil)) nil))
                  nil))
                nil)
               ("3" (all-typepreds) (("3" (assert) nil nil)) nil))
              nil))
            nil)
           ("3" (all-typepreds) (("3" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma "divbynrealpndx")
        (("2" (inst? :subst (x "v!1" n 10 d "d!1"))
          (("2" (replace -1 1)
            (("2" (lemma "ceiling_plus_int")
              (("2" (inst? :subst (i "d!1" x "v!1/10"))
                (("1" (replace -1 1)
                  (("1" (replace -6 1) (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (all-typepreds) (("2" (assert) nil nil)) nil)
                 ("3" (all-typepreds) (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (all-typepreds) (("3" (assert) nil nil)) nil)
       ("4" (lemma "divbynrealpndx")
        (("4" (inst? :subst (x "v!1" n 100 d "d!1"))
          (("4" (replace -1 1)
            (("4" (lemma "ceiling_plus_int")
              (("4" (inst? :subst (i "d!1" x "v!1/100"))
                (("1" (replace -1 1)
                  (("1" (replace -6 1) (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (all-typepreds) (("2" (assert) nil nil)) nil)
                 ("3" (all-typepreds) (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((divbynrealpndx formula-decl nil alaris_reversibility_pattern nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil) nil
    (total_order? const-decl "bool" orders nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (ceiling_plus_int formula-decl nil floor_ceil nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (even? const-decl "bool" integers nil)
    (strict_total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (integer nonempty-type-from-decl nil integers nil)
    (ivols type-eq-decl nil types_and_constants_th nil) nil
    (steprate type-eq-decl nil types_and_constants_th nil)
    (bigstep const-decl "nat" types_and_constants_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (low_range_vols_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (mid_range_vols_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (high_range_vols_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (state_DN_vtbi const-decl "ivols" alaris_th nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (state_UP_vtbi const-decl "ivols" alaris_th nil)
    (trim_vtbi const-decl "ivols" alaris_th nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil))
   shostak))
 (simpleupdowntime 0
  (simpleupdowntime-1 nil 3659185770
   ("" (skosimp*) (("" (grind) nil nil)) nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ceil_time const-decl "itimes" alaris_th nil)
    (range_time_ud const-decl "boolean" alaris_reversibility_pattern
     nil)
    (trim_time const-decl "itimes" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   shostak))
 (simpleUPDOWNdtime 0
  (simpleUPDOWNdtime-1 nil 3659185830
   ("" (skosimp*)
    (("" (grind)
      (("1" (all-typepreds) (("1" (grind) nil nil)) nil)
       ("2" (all-typepreds) (("2" (grind) nil nil)) nil)
       ("3" (all-typepreds) (("3" (grind) nil nil)) nil)
       ("4" (all-typepreds) (("4" (grind) nil nil)) nil)
       ("5" (all-typepreds) (("5" (grind) nil nil)) nil)
       ("6" (all-typepreds) (("6" (grind) nil nil)) nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (strict_total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (even? const-decl "bool" integers nil)
    (total_order? const-decl "bool" orders nil)
    (irreflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (strict_order? const-decl "bool" orders nil)
    (trichotomous? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (trim_time const-decl "itimes" alaris_th nil)
    (range_time_ud_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (ceil_time const-decl "itimes" alaris_th nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   shostak))
 (Simpledownuptime 0
  (Simpledownuptime-1 nil 3659185865
   ("" (skosimp*) (("" (grind) nil nil)) nil)
   ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ceil_time const-decl "itimes" alaris_th nil)
    (range_time_du const-decl "boolean" alaris_reversibility_pattern
     nil)
    (trim_time const-decl "itimes" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   shostak))
 (SimpleDOWNUPdtime 0
  (SimpleDOWNUPdtime-1 nil 3659185902
   ("" (skosimp*)
    (("" (grind)
      (("1" (all-typepreds) (("1" (grind) nil nil)) nil)
       ("2" (all-typepreds) (("2" (grind) nil nil)) nil)
       ("3" (all-typepreds) (("3" (grind) nil nil)) nil)
       ("4" (all-typepreds) (("4" (grind) nil nil)) nil)
       ("5" (all-typepreds) (("5" (grind) nil nil)) nil)
       ("6" (all-typepreds) (("6" (grind) nil nil)) nil)
       ("7" (all-typepreds) (("7" (grind) nil nil)) nil))
      nil))
    nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (even? const-decl "bool" integers nil)
    (strict_total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (irreflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (strict_order? const-decl "bool" orders nil)
    (trichotomous? const-decl "bool" orders nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (trim_time const-decl "itimes" alaris_th nil)
    (range_time_du_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (ceil_time const-decl "itimes" alaris_th nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   shostak))
 (guard_supsdown_rate_TCC1 0
  (guard_supsdown_rate_TCC1-1 nil 3657975481
   ("" (skosimp*)
    (("" (lemma "check_chev_sdown_permission")
      (("" (inst? :subst (st "st!1")) (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (check_chev_sdown_permission formula-decl nil alaris_th nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (state type-eq-decl nil alaris_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil))
   nil))
 (guard_fupfdown_rate_TCC1 0
  (guard_fupfdown_rate_TCC1-1 nil 3658840972 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (decrement const-decl "presstime" alaris_th nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (state_DN_rate const-decl "irates" alaris_th nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bigstep const-decl "nat" types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_fdown const-decl "boolean" alaris_th nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (guard_sdownsup_rate_TCC1 0
  (guard_sdownsup_rate_TCC1-1 nil 3659161116
   ("" (skosimp*)
    (("" (lemma "check_chev_sup_permission")
      (("" (inst? :subst (st "st!1")) (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (check_chev_sup_permission formula-decl nil alaris_th nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (state type-eq-decl nil alaris_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil))
   nil))
 (guard_fdownfup_rate_TCC1 0
  (guard_fdownfup_rate_TCC1-1 nil 3659163761 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (decrement const-decl "presstime" alaris_th nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bigstep const-decl "nat" types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_fup const-decl "boolean" alaris_th nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (guard_supsdown_vtbi_TCC1 0
  (guard_supsdown_vtbi_TCC1-1 nil 3659171254
   ("" (skosimp*)
    (("" (lemma "check_chev_sdown_permission")
      (("" (inst? :subst (st "st!1")) (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (check_chev_sdown_permission formula-decl nil alaris_th nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (state type-eq-decl nil alaris_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil))
   nil))
 (guard_fupfdown_vtbi_TCC1 0
  (guard_fupfdown_vtbi_TCC1-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (decrement const-decl "presstime" alaris_th nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bigstep const-decl "nat" types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_fdown const-decl "boolean" alaris_th nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (guard_sdownsup_vtbi_TCC1 0
  (guard_sdownsup_vtbi_TCC1-1 nil 3659171254
   ("" (skosimp*)
    (("" (lemma "check_chev_sup_permission")
      (("" (inst? :subst (st "st!1")) (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (check_chev_sup_permission formula-decl nil alaris_th nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (state type-eq-decl nil alaris_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil))
   nil))
 (guard_fdownfup_vtbi_TCC1 0
  (guard_fdownfup_vtbi_TCC1-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (decrement const-decl "presstime" alaris_th nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bigstep const-decl "nat" types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_fup const-decl "boolean" alaris_th nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (guard_supsdown_time_TCC1 0
  (guard_supsdown_time_TCC1-1 nil 3659185769
   ("" (skosimp*)
    (("" (lemma "check_chev_sdown_permission")
      (("" (inst? :subst (st "st!1")) (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (check_chev_sdown_permission formula-decl nil alaris_th nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (state type-eq-decl nil alaris_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil))
   nil))
 (guard_fupfdown_time_TCC1 0
  (guard_fupfdown_time_TCC1-1 nil 3659185769
   ("" (skosimp*)
    (("" (lemma "check_chev_fdown_permission")
      (("" (inst? :subst (st "st!1")) (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (check_chev_fdown_permission formula-decl nil alaris_th nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (state type-eq-decl nil alaris_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil))
   nil))
 (guard_sdownsup_time_TCC1 0
  (guard_sdownsup_time_TCC1-1 nil 3659185769
   ("" (skosimp*)
    (("" (lemma "check_chev_sup_permission")
      (("" (inst? :subst (st "st!1")) (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (check_chev_sup_permission formula-decl nil alaris_th nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (state type-eq-decl nil alaris_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil))
   nil))
 (guard_fdownfup_time_TCC1 0
  (guard_fdownfup_time_TCC1-1 nil 3659185769
   ("" (skosimp*)
    (("" (lemma "check_chev_fup_permission")
      (("" (inst? :subst (st "st!1")) (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (check_chev_fup_permission formula-decl nil alaris_th nil)
    (state type-eq-decl nil alaris_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil))
   nil))
 (low_supsdown_TCC1 0
  (low_supsdown_TCC1-1 nil 3657975481 ("" (subtype-tcc) nil nil)
   ((switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (sdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (guard_supsdown_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (low_range_rate const-decl "boolean" alaris_reversibility_pattern
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (low_supsdown_TCC2 0
  (low_supsdown_TCC2-1 nil 3657975481
   ("" (skosimp*)
    (("" (lemma "check_chev_sdown_permission")
      (("" (inst? :subst (st "st!1"))
        (("" (expand "guard_supsdown_rate") (("" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (check_chev_sdown_permission formula-decl nil alaris_th nil)
    (guard_supsdown_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (state type-eq-decl nil alaris_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil))
   nil))
 (low_supsdown_TCC3 0
  (low_supsdown_TCC3-1 nil 3657975481 ("" (subtype-tcc) nil nil)
   ((state_dn_rate const-decl "irates" alaris_th nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (sdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (guard_supsdown_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (low_range_rate const-decl "boolean" alaris_reversibility_pattern
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (low_supsdown_TCC4 0
  (low_supsdown_TCC4-1 nil 3657975481 ("" (subtype-tcc) nil nil)
   ((state_up_rate const-decl "irates" alaris_th nil)
    (state_dn_rate const-decl "irates" alaris_th nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (sdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (guard_supsdown_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (low_range_rate const-decl "boolean" alaris_reversibility_pattern
     nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (sup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (sup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sup_case_options const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_sup const-decl "boolean" alaris_th nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (low_supsdown 0
  (low_supsdown-1 nil 3657975631
   ("" (skosimp*)
    (("" (lemma "simpleupdown")
      (("" (inst? :subst (v "filter_rate(st!1)"))
        (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (release_sup const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (sup_case_options const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (sup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (state_up_vtbi const-decl "ivols" alaris_th nil)
    (sup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (guard_supsdown_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (per_sup const-decl "bool" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (sdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (trim_time const-decl "itimes" alaris_th nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (state_dn_vtbi const-decl "ivols" alaris_th nil)
    (trim_vtbi const-decl "ivols" alaris_th nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (sdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (state_up_rate const-decl "irates" alaris_th nil)
    (state_dn_rate const-decl "irates" alaris_th nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (low_range_rate const-decl "boolean" alaris_reversibility_pattern
     nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (simpleupdown formula-decl nil alaris_reversibility_pattern nil))
   shostak))
 (mid_supsdown_rate_TCC1 0
  (mid_supsdown_rate_TCC1-1 nil 3658057440 ("" (subtype-tcc) nil nil)
   ((switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (sdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (guard_supsdown_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (mid_range_rate const-decl "boolean" alaris_reversibility_pattern
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (mid_supsdown_rate_TCC2 0
  (mid_supsdown_rate_TCC2-1 nil 3658057440
   ("" (skosimp*)
    (("" (expand "guard_supsdown_rate")
      (("" (lemma "check_chev_sdown_permission")
        (("" (inst? :subst (st "st!1")) (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((guard_supsdown_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (check_chev_sdown_permission formula-decl nil alaris_th nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil))
   nil))
 (mid_supsdown_rate_TCC3 0
  (mid_supsdown_rate_TCC3-1 nil 3658057440 ("" (subtype-tcc) nil nil)
   ((state_dn_rate const-decl "irates" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (sdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (guard_supsdown_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (mid_range_rate const-decl "boolean" alaris_reversibility_pattern
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (mid_supsdown_rate_TCC4 0
  (mid_supsdown_rate_TCC4-1 nil 3658057440 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (state_up_rate const-decl "irates" alaris_th nil)
    (state_dn_rate const-decl "irates" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (sdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (guard_supsdown_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (mid_range_rate const-decl "boolean" alaris_reversibility_pattern
     nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (sup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (sup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sup_case_options const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_sup const-decl "boolean" alaris_th nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (mid_supsdown_rate 0
  (mid_supsdown_rate-1 nil 3658057441
   ("" (skosimp*)
    (("" (lemma "simpleupdown")
      (("" (inst? :subst (v "filter_rate(st!1)"))
        (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (release_sup const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (sup_case_options const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (sup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (state_up_vtbi const-decl "ivols" alaris_th nil)
    (sup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (guard_supsdown_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (per_sup const-decl "bool" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (sdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (trim_time const-decl "itimes" alaris_th nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (state_dn_vtbi const-decl "ivols" alaris_th nil)
    (trim_vtbi const-decl "ivols" alaris_th nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (sdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (mid_range_rate const-decl "boolean" alaris_reversibility_pattern
     nil)
    (state_up_rate const-decl "irates" alaris_th nil)
    (state_dn_rate const-decl "irates" alaris_th nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (simpleupdown formula-decl nil alaris_reversibility_pattern nil))
   shostak))
 (high_supsdown_rate_TCC1 0
  (high_supsdown_rate_TCC1-1 nil 3658057440 ("" (subtype-tcc) nil nil)
   ((switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (sdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (guard_supsdown_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (high_range_rate const-decl "boolean" alaris_reversibility_pattern
     nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (high_supsdown_rate_TCC2 0
  (high_supsdown_rate_TCC2-1 nil 3658057440
   ("" (skosimp*)
    (("" (expand "guard_supsdown_rate")
      (("" (lemma "check_chev_sdown_permission")
        (("" (inst? :subst (st "st!1")) (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((guard_supsdown_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (check_chev_sdown_permission formula-decl nil alaris_th nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil))
   nil))
 (high_supsdown_rate_TCC3 0
  (high_supsdown_rate_TCC3-1 nil 3658057440 ("" (subtype-tcc) nil nil)
   ((state_dn_rate const-decl "irates" alaris_th nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (sdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (guard_supsdown_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (high_range_rate const-decl "boolean" alaris_reversibility_pattern
     nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (high_supsdown_rate_TCC4 0
  (high_supsdown_rate_TCC4-1 nil 3658057440 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (state_up_rate const-decl "irates" alaris_th nil)
    (state_dn_rate const-decl "irates" alaris_th nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (sdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (guard_supsdown_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (high_range_rate const-decl "boolean" alaris_reversibility_pattern
     nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (sup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (sup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sup_case_options const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_sup const-decl "boolean" alaris_th nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (high_supsdown_rate 0
  (high_supsdown_rate-1 nil 3658124918
   ("" (skosimp*)
    (("" (lemma "simpleupdown")
      (("" (inst? :subst (v "filter_rate(st!1)"))
        (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (release_sup const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (sup_case_options const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (sup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (state_up_vtbi const-decl "ivols" alaris_th nil)
    (sup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (guard_supsdown_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (per_sup const-decl "bool" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (sdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (trim_time const-decl "itimes" alaris_th nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (state_dn_vtbi const-decl "ivols" alaris_th nil)
    (trim_vtbi const-decl "ivols" alaris_th nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (sdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (high_range_rate const-decl "boolean" alaris_reversibility_pattern
     nil)
    (state_up_rate const-decl "irates" alaris_th nil)
    (state_dn_rate const-decl "irates" alaris_th nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (simpleupdown formula-decl nil alaris_reversibility_pattern nil))
   shostak))
 (low_fupfdown_rate_TCC1 0
  (low_fupfdown_rate_TCC1-1 nil 3658234734 ("" (subtype-tcc) nil nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil))
   nil))
 (low_fupfdown_rate_TCC2 0
  (low_fupfdown_rate_TCC2-1 nil 3658234734 ("" (subtype-tcc) nil nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (guard_fupfdown_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (low_range_rate_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (low_fupfdown_rate_TCC3 0
  (low_fupfdown_rate_TCC3-1 nil 3658234734 ("" (subtype-tcc) nil nil)
   ((decrement const-decl "presstime" alaris_th nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (guard_fupfdown_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (low_range_rate_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_fdown const-decl "boolean" alaris_th nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (low_fupfdown_rate_TCC4 0
  (low_fupfdown_rate_TCC4-1 nil 3658234734 ("" (subtype-tcc) nil nil)
   ((state_DN_rate const-decl "irates" alaris_th nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (guard_fupfdown_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (low_range_rate_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (low_fupfdown_rate_TCC5 0
  (low_fupfdown_rate_TCC5-1 nil 3658234734 ("" (subtype-tcc) nil nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (state_UP_rate const-decl "irates" alaris_th nil)
    (state_DN_rate const-decl "irates" alaris_th nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (guard_fupfdown_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (low_range_rate_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (decrement const-decl "presstime" alaris_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_fup const-decl "boolean" alaris_th nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (low_fupfdown_rate 0
  (low_fupfdown_rate-1 nil 3658234735
   ("" (skosimp*)
    (("" (lemma "simpleUPDOWNd")
      ((""
        (inst? :subst (v "device(st!1)`infusionrate" d "small_step"))
        (("1" (flatten)
          (("1" (expand "filter_rate")
            (("1" (expand "release_fup")
              (("1" (expand "release_key")
                (("1" (expand "release_fdown")
                  (("1" (expand "release_key")
                    (("1" (expand "fup")
                      (("1" (lift-if)
                        (("1" (split)
                          (("1" (split)
                            (("1" (split)
                              (("1"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (split)
                                    (("1"
                                      (expand
                                       "fup_case_holding_NOTrlock")
                                      (("1"
                                        (expand "aug_rate")
                                        (("1"
                                          (expand "fdown")
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (lift-if)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand
                                       "fup_case_holding_NOTrlock")
                                      (("2"
                                        (expand "aug_rate")
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (expand "fdown")
                                            (("2"
                                              (split)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (expand
                                                                           "fdown_case_holding_NOTrlock")
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (split)
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (split)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil)
                                                                                               ("3"
                                                                                                (flatten)
                                                                                                (("3"
                                                                                                  (split)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (split)
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (split)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil)
                                                                                               ("3"
                                                                                                (flatten)
                                                                                                (("3"
                                                                                                  (split)
                                                                                                  (("1"
                                                                                                    (split)
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (split)
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (lift-if)
                                                                                                    (("3"
                                                                                                      (split)
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (split)
                                                                                            (("1"
                                                                                              (split)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (split)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (split)
                                                                                                      (("1"
                                                                                                        (split)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (split)
                                                                                                            (("1"
                                                                                                              (split)
                                                                                                              (("1"
                                                                                                                (split)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (split)
                                                                                                                    (("1"
                                                                                                                      (split)
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (split)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (split)
                                                                                                                                (("1"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (split)
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("3"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (split)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (split)
                                                                                                                            (("1"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (split)
                                                                                                                            (("1"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("3"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (flatten)
                                                                                                                        (("3"
                                                                                                                          (split)
                                                                                                                          (("1"
                                                                                                                            (split)
                                                                                                                            (("1"
                                                                                                                              (split)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (split)
                                                                                                                                  (("1"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (split)
                                                                                                                                  (("1"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("3"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (split)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (split)
                                                                                                                                  (("1"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (split)
                                                                                                                                  (("1"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("3"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (split)
                                                                                                                            (("1"
                                                                                                                              (split)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (split)
                                                                                                                                  (("1"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (split)
                                                                                                                                  (("1"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("3"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (split)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (split)
                                                                                                                                  (("1"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (split)
                                                                                                                                  (("1"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("3"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("3"
                                                                                                                            (split)
                                                                                                                            (("1"
                                                                                                                              (split)
                                                                                                                              (("1"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil)
                                                                                       ("3"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         4)
                                                                        (("2"
                                                                          (hide
                                                                           4)
                                                                          (("2"
                                                                            (expand
                                                                             "fdown_case_holding_NOTrlock")
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     3)
                                                                    (("2"
                                                                      (hide
                                                                       3)
                                                                      (("2"
                                                                        (expand
                                                                         "fdown_case_holding_NOTrlock")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (split)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lift-if)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (split)
                                                                        (("1"
                                                                          (flatten)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (split)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (split)
                                                                        (("1"
                                                                          (flatten)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (split)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("3"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (split)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (split)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (hide
                                                                     3)
                                                                    (("1"
                                                                      (hide
                                                                       3)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (split)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (split)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (hide
                                                                       3)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 4)
                                                              (("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (hide
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 4)
                                                            (("2"
                                                              (hide 2)
                                                              (("2"
                                                                (hide
                                                                 1)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 4)
                                                          (("2"
                                                            (hide 2)
                                                            (("2"
                                                              (hide 1)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (split)
                                        (("1" (grind) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (split)
                                            (("1"
                                              (split)
                                              (("1" (grind) nil nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (hide 5)
                                                        (("1"
                                                          (hide 5)
                                                          (("1"
                                                            (hide 5)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (hide 6)
                                                              (("1"
                                                                (hide
                                                                 6)
                                                                (("1"
                                                                  (hide
                                                                   6)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 6)
                                                              (("2"
                                                                (hide
                                                                 6)
                                                                (("2"
                                                                  (hide
                                                                   6)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (split)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (split)
                                                                              (("1"
                                                                                (hide
                                                                                 2)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (hide
                                                                                       4)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "guard_fupfdown_rate")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "rate_entry_ready")
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "guard_fupfdown_rate")
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "rate_entry_ready")
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (split)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "guard_fupfdown_rate")
                                                                              (("2"
                                                                                (flatten
                                                                                 -4)
                                                                                (("2"
                                                                                  (expand
                                                                                   "rate_entry_ready")
                                                                                  (("2"
                                                                                    (flatten
                                                                                     -4)
                                                                                    (("2"
                                                                                      (split
                                                                                       -5)
                                                                                      (("1"
                                                                                        (hide
                                                                                         1)
                                                                                        (("1"
                                                                                          (hide
                                                                                           1)
                                                                                          (("1"
                                                                                            (hide
                                                                                             1)
                                                                                            (("1"
                                                                                              (hide
                                                                                               1)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         1)
                                                                                        (("2"
                                                                                          (hide
                                                                                           1)
                                                                                          (("2"
                                                                                            (hide
                                                                                             1)
                                                                                            (("2"
                                                                                              (hide
                                                                                               1)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (split)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (expand
                                                                             "guard_fupfdown_rate")
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (split)
                                                                              (("1"
                                                                                (expand
                                                                                 "guard_fupfdown_rate")
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "guard_fupfdown_rate")
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "guard_fupfdown_rate")
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "guard_fupfdown_rate")
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "guard_fupfdown_rate")
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (split)
                                                                              (("1"
                                                                                (expand
                                                                                 "guard_fupfdown_rate")
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "guard_fupfdown_rate")
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "guard_fupfdown_rate")
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "guard_fupfdown_rate")
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "guard_fupfdown_rate")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (split)
                                                    (("1"
                                                      (expand
                                                       "guard_fupfdown_rate")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (expand
                                                             "guard_fupfdown_rate")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (split)
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (expand
                                                                   "guard_fupfdown_rate")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (split)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (expand
                                                                         "guard_fupfdown_rate")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (split)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (expand
                                                                               "guard_fupfdown_rate")
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "guard_fupfdown_rate")
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (split)
                                                                            (("1"
                                                                              (expand
                                                                               "guard_fupfdown_rate")
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "guard_fupfdown_rate")
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (split)
                                                                      (("1"
                                                                        (expand
                                                                         "guard_fupfdown_rate")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (split)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (split)
                                                                            (("1"
                                                                              (expand
                                                                               "guard_fupfdown_rate")
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "guard_fupfdown_rate")
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (split)
                                                                (("1"
                                                                  (expand
                                                                   "guard_fupfdown_rate")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (split)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (expand
                                                                         "guard_fupfdown_rate")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "guard_fupfdown_rate")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "guard_fupfdown_rate")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "guard_fupfdown_rate")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand
                                               "guard_fupfdown_rate")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "guard_fupfdown_rate")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "guard_fupfdown_rate")
                                (("2" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (expand "guard_fupfdown_rate")
                              (("2" (grind) nil nil)) nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "simpleUPDOWNd")
          (("2"
            (inst? :subst (v "device(st!1)`infusionrate" d small_step))
            (("1" (expand "guard_fupfdown_rate")
              (("1" (grind) nil nil)) nil)
             ("2" (lemma "simpleUPDOWNd")
              (("2"
                (inst? :subst
                 (v "device(st!1)`infusionrate" d small_step))
                (("1" (expand "guard_fupfdown_rate")
                  (("1" (grind) nil nil)) nil)
                 ("2" (all-typepreds)
                  (("2" (expand "small_step") (("2" (assert) nil nil))
                    nil))
                  nil)
                 ("3" (expand "small_step") (("3" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("3" (assert)
              (("3" (expand "small_step") (("3" (assert) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (expand "small_step") (("3" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bigstep const-decl "nat" types_and_constants_th nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (release_key const-decl "state" alaris_th nil)
    (high_range_rate_f const-decl "boolean"
     alaris_reversibility_pattern nil)
    (aug_rate const-decl "pump" pump_th nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (state_DN_rate const-decl "irates" alaris_th nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (decrement const-decl "presstime" alaris_th nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (low_range_rate_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (guard_fupfdown_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (per_fup const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (state_UP_rate const-decl "irates" alaris_th nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (state_DN_vtbi const-decl "ivols" alaris_th nil)
    (trim_vtbi const-decl "ivols" alaris_th nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (trim_time const-decl "itimes" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (state_UP_vtbi const-decl "ivols" alaris_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (mid_range_rate_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (fup const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (even? const-decl "bool" integers nil)
    (per_release_fdown const-decl "boolean" alaris_th nil)
    (per_release_fup const-decl "boolean" alaris_th nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (simpleUPDOWNd formula-decl nil alaris_reversibility_pattern nil))
   shostak))
 (mid_fupfdown_rate_TCC1 0
  (mid_fupfdown_rate_TCC1-1 nil 3658234734 ("" (subtype-tcc) nil nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (guard_fupfdown_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (mid_range_rate_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (mid_fupfdown_rate_TCC2 0
  (mid_fupfdown_rate_TCC2-1 nil 3658234734 ("" (subtype-tcc) nil nil)
   ((decrement const-decl "presstime" alaris_th nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (guard_fupfdown_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (mid_range_rate_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_fdown const-decl "boolean" alaris_th nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (mid_fupfdown_rate_TCC3 0
  (mid_fupfdown_rate_TCC3-1 nil 3658234734 ("" (subtype-tcc) nil nil)
   ((state_DN_rate const-decl "irates" alaris_th nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (guard_fupfdown_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (mid_range_rate_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (mid_fupfdown_rate_TCC4 0
  (mid_fupfdown_rate_TCC4-1 nil 3658234734 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (state_UP_rate const-decl "irates" alaris_th nil)
    (state_DN_rate const-decl "irates" alaris_th nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (guard_fupfdown_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (mid_range_rate_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (decrement const-decl "presstime" alaris_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_fup const-decl "boolean" alaris_th nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (mid_fupfdown_rate 0
  (mid_fupfdown_rate-1 nil 3659097594
   ("" (skosimp*)
    (("" (expand "guard_fupfdown_rate")
      (("" (lemma "simpleUPDOWNd")
        ((""
          (inst? :subst (v "device(st!1)`infusionrate" d small_step))
          (("1" (expand "filter_rate") (("1" (grind) nil nil)) nil)
           ("2" (expand "small_step") (("2" (assert) nil nil)) nil)
           ("3" (expand "small_step") (("3" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((simpleUPDOWNd formula-decl nil alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (release_fup const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (state_UP_vtbi const-decl "ivols" alaris_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (trim_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (state_DN_vtbi const-decl "ivols" alaris_th nil)
    (trim_vtbi const-decl "ivols" alaris_th nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (decrement const-decl "presstime" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (mid_range_rate_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (state_UP_rate const-decl "irates" alaris_th nil)
    (state_DN_rate const-decl "irates" alaris_th nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (bigstep const-decl "nat" types_and_constants_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (state type-eq-decl nil alaris_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (guard_fupfdown_rate const-decl "boolean"
     alaris_reversibility_pattern nil))
   shostak))
 (high_fupfdown_rate_TCC1 0
  (high_fupfdown_rate_TCC1-1 nil 3658234734 ("" (subtype-tcc) nil nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (guard_fupfdown_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (high_range_rate_f const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (high_fupfdown_rate_TCC2 0
  (high_fupfdown_rate_TCC2-1 nil 3658234734 ("" (subtype-tcc) nil nil)
   ((decrement const-decl "presstime" alaris_th nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (guard_fupfdown_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (high_range_rate_f const-decl "boolean"
     alaris_reversibility_pattern nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_fdown const-decl "boolean" alaris_th nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (high_fupfdown_rate_TCC3 0
  (high_fupfdown_rate_TCC3-1 nil 3658234734 ("" (subtype-tcc) nil nil)
   ((state_DN_rate const-decl "irates" alaris_th nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (guard_fupfdown_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (high_range_rate_f const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (high_fupfdown_rate_TCC4 0
  (high_fupfdown_rate_TCC4-1 nil 3658234734 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (state_UP_rate const-decl "irates" alaris_th nil)
    (state_DN_rate const-decl "irates" alaris_th nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (guard_fupfdown_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (high_range_rate_f const-decl "boolean"
     alaris_reversibility_pattern nil)
    (decrement const-decl "presstime" alaris_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_fup const-decl "boolean" alaris_th nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (high_fupfdown_rate 0
  (high_fupfdown_rate-1 nil 3659098820
   ("" (skosimp*)
    (("" (expand "guard_fupfdown_rate")
      (("" (lemma "simpleUPDOWNd")
        ((""
          (inst? :subst (v "device(st!1)`infusionrate" d small_step))
          (("1" (grind) nil nil)
           ("2" (expand "small_step") (("2" (assert) nil nil)) nil)
           ("3" (expand "small_step") (("3" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((simpleUPDOWNd formula-decl nil alaris_reversibility_pattern nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (state_DN_rate const-decl "irates" alaris_th nil)
    (state_UP_rate const-decl "irates" alaris_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (trim_vtbi const-decl "ivols" alaris_th nil)
    (state_DN_vtbi const-decl "ivols" alaris_th nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (trim_time const-decl "itimes" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (high_range_rate_f const-decl "boolean"
     alaris_reversibility_pattern nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (state_UP_vtbi const-decl "ivols" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (mid_range_rate_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (low_range_rate_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bigstep const-decl "nat" types_and_constants_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (state type-eq-decl nil alaris_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (guard_fupfdown_rate const-decl "boolean"
     alaris_reversibility_pattern nil))
   shostak))
 (low_sdownsup_rate_TCC1 0
  (low_sdownsup_rate_TCC1-1 nil 3659161116 ("" (subtype-tcc) nil nil)
   ((switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (sup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (sup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sup_case_options const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sup const-decl "state" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (guard_sdownsup_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (low_range_rate_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (low_sdownsup_rate_TCC2 0
  (low_sdownsup_rate_TCC2-1 nil 3659161116
   ("" (skosimp*)
    (("" (expand "guard_sdownsup_rate")
      (("" (lemma "check_chev_sup_permission")
        (("" (inst? :subst (st "st!1")) (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((guard_sdownsup_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (check_chev_sup_permission formula-decl nil alaris_th nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil))
   nil))
 (low_sdownsup_rate_TCC3 0
  (low_sdownsup_rate_TCC3-1 nil 3659161116 ("" (subtype-tcc) nil nil)
   ((state_up_rate const-decl "irates" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (sup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (sup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sup_case_options const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sup const-decl "state" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (guard_sdownsup_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (low_range_rate_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (low_sdownsup_rate_TCC4 0
  (low_sdownsup_rate_TCC4-1 nil 3659161116 ("" (subtype-tcc) nil nil)
   ((nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (state_dn_rate const-decl "irates" alaris_th nil)
    (state_up_rate const-decl "irates" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (sup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (sup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sup_case_options const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sup const-decl "state" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (guard_sdownsup_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (low_range_rate_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (sdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_sdown const-decl "boolean" alaris_th nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (low_sdownsup_rate 0
  (low_sdownsup_rate-1 nil 3659161221
   ("" (skosimp*)
    (("" (expand "guard_sdownsup_rate")
      (("" (expand "rate_entry_ready")
        (("" (lemma "Simpledownup")
          (("" (inst? :subst (v "device(st!1)`infusionrate"))
            (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (mid_range_rate_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (high_range_rate_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (state_up_rate const-decl "irates" alaris_th nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (state_dn_rate const-decl "irates" alaris_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sup const-decl "state" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (low_range_rate_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (Simpledownup formula-decl nil alaris_reversibility_pattern nil)
    (guard_sdownsup_rate const-decl "boolean"
     alaris_reversibility_pattern nil))
   shostak))
 (mid_sdownsup_rate_TCC1 0
  (mid_sdownsup_rate_TCC1-1 nil 3659161116 ("" (subtype-tcc) nil nil)
   ((switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (sup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (sup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sup_case_options const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sup const-decl "state" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (guard_sdownsup_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (mid_range_rate_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (mid_sdownsup_rate_TCC2 0
  (mid_sdownsup_rate_TCC2-1 nil 3659161116
   ("" (skosimp*)
    (("" (expand "guard_sdownsup_rate")
      (("" (lemma "check_chev_sup_permission")
        (("" (inst? :subst (st "st!1")) (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((guard_sdownsup_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (check_chev_sup_permission formula-decl nil alaris_th nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil))
   nil))
 (mid_sdownsup_rate_TCC3 0
  (mid_sdownsup_rate_TCC3-1 nil 3659161116 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (state_up_rate const-decl "irates" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (sup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (sup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sup_case_options const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sup const-decl "state" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (guard_sdownsup_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (mid_range_rate_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (mid_sdownsup_rate_TCC4 0
  (mid_sdownsup_rate_TCC4-1 nil 3659161116 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (state_dn_rate const-decl "irates" alaris_th nil)
    (state_up_rate const-decl "irates" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (sup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (sup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sup_case_options const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sup const-decl "state" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (guard_sdownsup_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (mid_range_rate_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (sdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_sdown const-decl "boolean" alaris_th nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (mid_sdownsup_rate 0
  (mid_sdownsup_rate-1 nil 3659161675
   ("" (skosimp*)
    (("" (expand "guard_sdownsup_rate")
      (("" (expand "rate_entry_ready")
        (("" (lemma "Simpledownup")
          (("" (inst? :subst (v "device(st!1)`infusionrate"))
            (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (high_range_rate_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (low_range_rate_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (state_up_rate const-decl "irates" alaris_th nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (state_dn_rate const-decl "irates" alaris_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sup const-decl "state" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (mid_range_rate_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (Simpledownup formula-decl nil alaris_reversibility_pattern nil)
    (guard_sdownsup_rate const-decl "boolean"
     alaris_reversibility_pattern nil))
   shostak))
 (high_sdownsup_rate_TCC1 0
  (high_sdownsup_rate_TCC1-1 nil 3659161116 ("" (subtype-tcc) nil nil)
   ((switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (sup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (sup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sup_case_options const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sup const-decl "state" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (guard_sdownsup_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (high_range_rate_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (high_sdownsup_rate_TCC2 0
  (high_sdownsup_rate_TCC2-1 nil 3659161116
   ("" (skosimp*)
    (("" (expand "guard_sdownsup_rate")
      (("" (lemma "check_chev_sup_permission")
        (("" (inst? :subst (st "st!1")) (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((guard_sdownsup_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (check_chev_sup_permission formula-decl nil alaris_th nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil))
   nil))
 (high_sdownsup_rate_TCC3 0
  (high_sdownsup_rate_TCC3-1 nil 3659161116 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (state_up_rate const-decl "irates" alaris_th nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (sup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (sup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sup_case_options const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sup const-decl "state" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (guard_sdownsup_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (high_range_rate_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (high_sdownsup_rate_TCC4 0
  (high_sdownsup_rate_TCC4-1 nil 3659161116 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (state_dn_rate const-decl "irates" alaris_th nil)
    (state_up_rate const-decl "irates" alaris_th nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (sup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (sup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sup_case_options const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sup const-decl "state" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (guard_sdownsup_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (high_range_rate_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (sdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_sdown const-decl "boolean" alaris_th nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (high_sdownsup_rate 0
  (high_sdownsup_rate-1 nil 3659162005
   ("" (skosimp*)
    (("" (expand "guard_sdownsup_rate")
      (("" (expand "rate_entry_ready")
        (("" (lemma "Simpledownup")
          (("" (inst? :subst (v "device(st!1)`infusionrate"))
            (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (mid_range_rate_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (low_range_rate_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (state_up_rate const-decl "irates" alaris_th nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (state_dn_rate const-decl "irates" alaris_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sup const-decl "state" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (high_range_rate_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (Simpledownup formula-decl nil alaris_reversibility_pattern nil)
    (guard_sdownsup_rate const-decl "boolean"
     alaris_reversibility_pattern nil))
   shostak))
 (low_fdownfup_rate_TCC1 0
  (low_fdownfup_rate_TCC1-1 nil 3659163761 ("" (subtype-tcc) nil nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (guard_fdownfup_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (low_range_rate_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (low_fdownfup_rate_TCC2 0
  (low_fdownfup_rate_TCC2-1 nil 3659163761 ("" (subtype-tcc) nil nil)
   ((decrement const-decl "presstime" alaris_th nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (guard_fdownfup_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (low_range_rate_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_fup const-decl "boolean" alaris_th nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (low_fdownfup_rate_TCC3 0
  (low_fdownfup_rate_TCC3-1 nil 3659163761 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (state_UP_rate const-decl "irates" alaris_th nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (guard_fdownfup_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (low_range_rate_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (low_fdownfup_rate_TCC4 0
  (low_fdownfup_rate_TCC4-1 nil 3659163761 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (state_DN_rate const-decl "irates" alaris_th nil)
    (state_UP_rate const-decl "irates" alaris_th nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (guard_fdownfup_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (low_range_rate_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (decrement const-decl "presstime" alaris_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_fdown const-decl "boolean" alaris_th nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (low_fdownfup_rate 0
  (low_fdownfup_rate-1 nil 3659166267
   ("" (skosimp*)
    (("" (expand "guard_fdownfup_rate")
      (("" (expand "rate_entry_ready")
        (("" (lemma "SimpleDOWNUPd")
          ((""
            (inst? :subst (d small_step v "device(st!1)`infusionrate"))
            (("1" (grind) nil nil)
             ("2" (expand "small_step") (("2" (assert) nil nil)) nil)
             ("3" (expand "small_step") (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bigstep const-decl "nat" types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (mid_range_rate_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (high_range_rate_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (state_UP_rate const-decl "irates" alaris_th nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (state_DN_rate const-decl "irates" alaris_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (low_range_rate_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (SimpleDOWNUPd formula-decl nil alaris_reversibility_pattern nil)
    (guard_fdownfup_rate const-decl "boolean"
     alaris_reversibility_pattern nil))
   shostak))
 (mid_fdownfup_rate_TCC1 0
  (mid_fdownfup_rate_TCC1-1 nil 3659163761 ("" (subtype-tcc) nil nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (guard_fdownfup_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (mid_range_rate_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (mid_fdownfup_rate_TCC2 0
  (mid_fdownfup_rate_TCC2-1 nil 3659163761 ("" (subtype-tcc) nil nil)
   ((decrement const-decl "presstime" alaris_th nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (guard_fdownfup_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (mid_range_rate_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_fup const-decl "boolean" alaris_th nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (mid_fdownfup_rate_TCC3 0
  (mid_fdownfup_rate_TCC3-1 nil 3659163761 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (state_UP_rate const-decl "irates" alaris_th nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (guard_fdownfup_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (mid_range_rate_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (mid_fdownfup_rate_TCC4 0
  (mid_fdownfup_rate_TCC4-1 nil 3659163761 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (state_DN_rate const-decl "irates" alaris_th nil)
    (state_UP_rate const-decl "irates" alaris_th nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (guard_fdownfup_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (mid_range_rate_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (decrement const-decl "presstime" alaris_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_fdown const-decl "boolean" alaris_th nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (mid_fdownfup_rate 0
  (mid_fdownfup_rate-1 nil 3659166685
   ("" (skosimp*)
    (("" (expand "guard_fdownfup_rate")
      (("" (expand "rate_entry_ready")
        (("" (lemma "SimpleDOWNUPd")
          ((""
            (inst? :subst (d small_step v "device(st!1)`infusionrate"))
            (("1" (grind) nil nil)
             ("2" (expand "small_step") (("2" (assert) nil nil)) nil)
             ("3" (expand "small_step") (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bigstep const-decl "nat" types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (high_range_rate_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (low_range_rate_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (state_UP_rate const-decl "irates" alaris_th nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (state_DN_rate const-decl "irates" alaris_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (mid_range_rate_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (SimpleDOWNUPd formula-decl nil alaris_reversibility_pattern nil)
    (guard_fdownfup_rate const-decl "boolean"
     alaris_reversibility_pattern nil))
   shostak))
 (high_fdownfup_rate_TCC1 0
  (high_fdownfup_rate_TCC1-1 nil 3659163761 ("" (subtype-tcc) nil nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (guard_fdownfup_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (high_range_rate_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (high_fdownfup_rate_TCC2 0
  (high_fdownfup_rate_TCC2-1 nil 3659163761 ("" (subtype-tcc) nil nil)
   ((decrement const-decl "presstime" alaris_th nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (guard_fdownfup_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (high_range_rate_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_fup const-decl "boolean" alaris_th nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (high_fdownfup_rate_TCC3 0
  (high_fdownfup_rate_TCC3-1 nil 3659163761 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (state_UP_rate const-decl "irates" alaris_th nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (guard_fdownfup_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (high_range_rate_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (high_fdownfup_rate_TCC4 0
  (high_fdownfup_rate_TCC4-1 nil 3659163761 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (state_DN_rate const-decl "irates" alaris_th nil)
    (state_UP_rate const-decl "irates" alaris_th nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (guard_fdownfup_rate const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (high_range_rate_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (decrement const-decl "presstime" alaris_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_fdown const-decl "boolean" alaris_th nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (high_fdownfup_rate 0
  (high_fdownfup_rate-1 nil 3659166898
   ("" (skosimp*)
    (("" (expand "guard_fdownfup_rate")
      (("" (expand "rate_entry_ready")
        (("" (lemma "SimpleDOWNUPd")
          ((""
            (inst? :subst (d small_step v "device(st!1)`infusionrate"))
            (("1" (grind) nil nil)
             ("2" (expand "small_step") (("2" (assert) nil nil)) nil)
             ("3" (expand "small_step") (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rate_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bigstep const-decl "nat" types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (mid_range_rate_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (low_range_rate_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (trim_rate const-decl "irates" alaris_th nil)
    (state_UP_rate const-decl "irates" alaris_th nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (state_DN_rate const-decl "irates" alaris_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (filter_rate const-decl "irates" alaris_reversibility_pattern nil)
    (high_range_rate_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (SimpleDOWNUPd formula-decl nil alaris_reversibility_pattern nil)
    (guard_fdownfup_rate const-decl "boolean"
     alaris_reversibility_pattern nil))
   shostak))
 (low_supsdown_vtbi_TCC1 0
  (low_supsdown_vtbi_TCC1-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (sdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (guard_supsdown_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (low_range_vols const-decl "boolean" alaris_reversibility_pattern
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (low_supsdown_vtbi_TCC2 0
  (low_supsdown_vtbi_TCC2-1 nil 3659171254
   ("" (skosimp*)
    (("" (expand "guard_supsdown_vtbi")
      (("" (lemma "check_chev_sdown_permission")
        (("" (inst? :subst (st "st!1")) (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((guard_supsdown_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (check_chev_sdown_permission formula-decl nil alaris_th nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil))
   nil))
 (low_supsdown_vtbi_TCC3 0
  (low_supsdown_vtbi_TCC3-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (sdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (guard_supsdown_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (low_range_vols const-decl "boolean" alaris_reversibility_pattern
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (low_supsdown_vtbi_TCC4 0
  (low_supsdown_vtbi_TCC4-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((state_dn_vtbi const-decl "ivols" alaris_th nil)
    (trim_vtbi const-decl "ivols" alaris_th nil)
    (state_up_rate const-decl "irates" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (sdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (guard_supsdown_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (low_range_vols const-decl "boolean" alaris_reversibility_pattern
     nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (sup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (sup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sup_case_options const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_sup const-decl "boolean" alaris_th nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (low_supsdown_vtbi 0
  (low_supsdown_vtbi-1 nil 3659175372
   ("" (skosimp*)
    (("" (expand "guard_supsdown_vtbi")
      (("" (expand "vtbi_entry_ready")
        (("" (lemma "simpleupdownvtbi") (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (state type-eq-decl nil alaris_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (trim_vtbi const-decl "ivols" alaris_th nil)
    (state_dn_vtbi const-decl "ivols" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (low_range_vols const-decl "boolean" alaris_reversibility_pattern
     nil)
    (state_up_vtbi const-decl "ivols" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (release_sup const-decl "state" alaris_th nil)
    (mid_range_vols const-decl "boolean" alaris_reversibility_pattern
     nil)
    (high_range_vols const-decl "boolean" alaris_reversibility_pattern
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (simpleupdownvtbi formula-decl nil alaris_reversibility_pattern
     nil)
    (guard_supsdown_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil))
   shostak))
 (mid_supsdown_vtbi_TCC1 0
  (mid_supsdown_vtbi_TCC1-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (sdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (guard_supsdown_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (mid_range_vols const-decl "boolean" alaris_reversibility_pattern
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (mid_supsdown_vtbi_TCC2 0
  (mid_supsdown_vtbi_TCC2-1 nil 3659171254
   ("" (skosimp*)
    (("" (expand "guard_supsdown_vtbi")
      (("" (lemma "check_chev_sdown_permission")
        (("" (inst? :subst (st "st!1")) (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((guard_supsdown_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (check_chev_sdown_permission formula-decl nil alaris_th nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil))
   nil))
 (mid_supsdown_vtbi_TCC3 0
  (mid_supsdown_vtbi_TCC3-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (sdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (guard_supsdown_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (mid_range_vols const-decl "boolean" alaris_reversibility_pattern
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (mid_supsdown_vtbi_TCC4 0
  (mid_supsdown_vtbi_TCC4-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((state_dn_vtbi const-decl "ivols" alaris_th nil)
    (state_up_rate const-decl "irates" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (sdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (guard_supsdown_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (mid_range_vols const-decl "boolean" alaris_reversibility_pattern
     nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (sup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (sup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sup_case_options const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_sup const-decl "boolean" alaris_th nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (mid_supsdown_vtbi 0
  (mid_supsdown_vtbi-1 nil 3659175566
   ("" (skosimp*)
    (("" (expand "guard_supsdown_vtbi")
      (("" (expand "vtbi_entry_ready")
        (("" (lemma "simpleupdownvtbi")
          (("" (inst? :subst (v "newvtbi(st!1)"))
            (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (high_range_vols const-decl "boolean" alaris_reversibility_pattern
     nil)
    (low_range_vols const-decl "boolean" alaris_reversibility_pattern
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (release_sup const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (mid_range_vols const-decl "boolean" alaris_reversibility_pattern
     nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (per_sup const-decl "bool" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (state_up_vtbi const-decl "ivols" alaris_th nil)
    (state_dn_vtbi const-decl "ivols" alaris_th nil)
    (trim_vtbi const-decl "ivols" alaris_th nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (simpleupdownvtbi formula-decl nil alaris_reversibility_pattern
     nil)
    (guard_supsdown_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil))
   shostak))
 (high_supsdown_vtbi_TCC1 0
  (high_supsdown_vtbi_TCC1-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (sdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (guard_supsdown_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (high_range_vols const-decl "boolean" alaris_reversibility_pattern
     nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (high_supsdown_vtbi_TCC2 0
  (high_supsdown_vtbi_TCC2-1 nil 3659171254
   ("" (skosimp*)
    (("" (expand "guard_supsdown_vtbi")
      (("" (lemma "check_chev_sdown_permission")
        (("" (inst? :subst (st "st!1")) (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((guard_supsdown_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (check_chev_sdown_permission formula-decl nil alaris_th nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil))
   nil))
 (high_supsdown_vtbi_TCC3 0
  (high_supsdown_vtbi_TCC3-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (sdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (guard_supsdown_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (high_range_vols const-decl "boolean" alaris_reversibility_pattern
     nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (high_supsdown_vtbi_TCC4 0
  (high_supsdown_vtbi_TCC4-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((state_dn_vtbi const-decl "ivols" alaris_th nil)
    (trim_vtbi const-decl "ivols" alaris_th nil)
    (state_up_rate const-decl "irates" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (sdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (guard_supsdown_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (high_range_vols const-decl "boolean" alaris_reversibility_pattern
     nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (sup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (sup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sup_case_options const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_sup const-decl "boolean" alaris_th nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (high_supsdown_vtbi 0
  (high_supsdown_vtbi-1 nil 3659175844
   ("" (skosimp*)
    (("" (expand "guard_supsdown_vtbi")
      (("" (expand "vtbi_entry_ready")
        (("" (lemma "simpleupdownvtbi")
          (("" (inst? :subst (v "newvtbi(st!1)"))
            (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (mid_range_vols const-decl "boolean" alaris_reversibility_pattern
     nil)
    (low_range_vols const-decl "boolean" alaris_reversibility_pattern
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (trim_vtbi const-decl "ivols" alaris_th nil)
    (state_dn_vtbi const-decl "ivols" alaris_th nil)
    (state_up_vtbi const-decl "ivols" alaris_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (high_range_vols const-decl "boolean" alaris_reversibility_pattern
     nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (release_sup const-decl "state" alaris_th nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (simpleupdownvtbi formula-decl nil alaris_reversibility_pattern
     nil)
    (guard_supsdown_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil))
   shostak))
 (low_fupfdown_vtbi_TCC1 0
  (low_fupfdown_vtbi_TCC1-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (guard_fupfdown_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (low_range_vols_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (low_fupfdown_vtbi_TCC2 0
  (low_fupfdown_vtbi_TCC2-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((decrement const-decl "presstime" alaris_th nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (guard_fupfdown_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (low_range_vols_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_fdown const-decl "boolean" alaris_th nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (low_fupfdown_vtbi_TCC3 0
  (low_fupfdown_vtbi_TCC3-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((decrement const-decl "presstime" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (guard_fupfdown_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (low_range_vols_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (low_fupfdown_vtbi_TCC4 0
  (low_fupfdown_vtbi_TCC4-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((state_DN_vtbi const-decl "ivols" alaris_th nil)
    (trim_vtbi const-decl "ivols" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (guard_fupfdown_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (low_range_vols_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (decrement const-decl "presstime" alaris_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_fup const-decl "boolean" alaris_th nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (low_fupfdown_vtbi 0
  (low_fupfdown_vtbi-1 nil 3659175986
   ("" (skosimp*)
    (("" (expand "guard_fupfdown_vtbi")
      (("" (expand "vtbi_entry_ready")
        (("" (lemma "simpleUPDOWNdvtbi")
          (("" (inst? :subst (v "newvtbi(st!1)" d small_step))
            (("1" (grind) nil nil)
             ("2" (expand "small_step") (("2" (grind) nil nil)) nil)
             ("3" (expand "small_step") (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bigstep const-decl "nat" types_and_constants_th nil)
    (high_range_vols_f const-decl "boolean"
     alaris_reversibility_pattern nil)
    (mid_range_vols_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (trim_vtbi const-decl "ivols" alaris_th nil)
    (state_DN_vtbi const-decl "ivols" alaris_th nil)
    (state_UP_vtbi const-decl "ivols" alaris_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (low_range_vols_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (simpleUPDOWNdvtbi formula-decl nil alaris_reversibility_pattern
     nil)
    (guard_fupfdown_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil))
   shostak))
 (mid_fupfdown_vtbi_TCC1 0
  (mid_fupfdown_vtbi_TCC1-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (guard_fupfdown_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (mid_range_vols_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (mid_fupfdown_vtbi_TCC2 0
  (mid_fupfdown_vtbi_TCC2-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((decrement const-decl "presstime" alaris_th nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (guard_fupfdown_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (mid_range_vols_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_fdown const-decl "boolean" alaris_th nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (mid_fupfdown_vtbi_TCC3 0
  (mid_fupfdown_vtbi_TCC3-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((decrement const-decl "presstime" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (guard_fupfdown_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (mid_range_vols_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (mid_fupfdown_vtbi_TCC4 0
  (mid_fupfdown_vtbi_TCC4-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((state_DN_vtbi const-decl "ivols" alaris_th nil)
    (trim_vtbi const-decl "ivols" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (guard_fupfdown_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (mid_range_vols_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (decrement const-decl "presstime" alaris_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_fup const-decl "boolean" alaris_th nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (mid_fupfdown_vtbi 0
  (mid_fupfdown_vtbi-1 nil 3659176321
   ("" (skosimp*)
    (("" (expand "guard_fupfdown_vtbi")
      (("" (expand "vtbi_entry_ready")
        (("" (lemma "simpleUPDOWNdvtbi")
          (("" (inst? :subst (v "newvtbi(st!1)" d small_step))
            (("1" (grind) nil nil)
             ("2" (expand "small_step") (("2" (assert) nil nil)) nil)
             ("3" (expand "small_step") (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bigstep const-decl "nat" types_and_constants_th nil)
    (high_range_vols_f const-decl "boolean"
     alaris_reversibility_pattern nil)
    (low_range_vols_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (trim_vtbi const-decl "ivols" alaris_th nil)
    (state_DN_vtbi const-decl "ivols" alaris_th nil)
    (state_UP_vtbi const-decl "ivols" alaris_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (mid_range_vols_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (simpleUPDOWNdvtbi formula-decl nil alaris_reversibility_pattern
     nil)
    (guard_fupfdown_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil))
   shostak))
 (high_fupfdown_vtbi_TCC1 0
  (high_fupfdown_vtbi_TCC1-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (guard_fupfdown_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (high_range_vols_f const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (high_fupfdown_vtbi_TCC2 0
  (high_fupfdown_vtbi_TCC2-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((decrement const-decl "presstime" alaris_th nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (guard_fupfdown_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (high_range_vols_f const-decl "boolean"
     alaris_reversibility_pattern nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_fdown const-decl "boolean" alaris_th nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (high_fupfdown_vtbi_TCC3 0
  (high_fupfdown_vtbi_TCC3-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((decrement const-decl "presstime" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (guard_fupfdown_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (high_range_vols_f const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (high_fupfdown_vtbi_TCC4 0
  (high_fupfdown_vtbi_TCC4-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((state_DN_vtbi const-decl "ivols" alaris_th nil)
    (trim_vtbi const-decl "ivols" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (guard_fupfdown_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (high_range_vols_f const-decl "boolean"
     alaris_reversibility_pattern nil)
    (decrement const-decl "presstime" alaris_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_fup const-decl "boolean" alaris_th nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (high_fupfdown_vtbi 0
  (high_fupfdown_vtbi-1 nil 3659176502
   ("" (skosimp*)
    (("" (expand "guard_fupfdown_vtbi")
      (("" (expand "vtbi_entry_ready")
        (("" (lemma "simpleUPDOWNdvtbi")
          (("" (inst? :subst (v "newvtbi(st!1)" d small_step))
            (("1" (grind) nil nil)
             ("2" (expand "small_step") (("2" (assert) nil nil)) nil)
             ("3" (expand "small_step") (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bigstep const-decl "nat" types_and_constants_th nil)
    (mid_range_vols_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (low_range_vols_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (trim_vtbi const-decl "ivols" alaris_th nil)
    (state_DN_vtbi const-decl "ivols" alaris_th nil)
    (state_UP_vtbi const-decl "ivols" alaris_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (high_range_vols_f const-decl "boolean"
     alaris_reversibility_pattern nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (simpleUPDOWNdvtbi formula-decl nil alaris_reversibility_pattern
     nil)
    (guard_fupfdown_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil))
   shostak))
 (low_sdownsup_vtbi_TCC1 0
  (low_sdownsup_vtbi_TCC1-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (sup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (sup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sup_case_options const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sup const-decl "state" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (guard_sdownsup_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (low_range_vols_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (low_sdownsup_vtbi_TCC2 0
  (low_sdownsup_vtbi_TCC2-1 nil 3659171254
   ("" (skosimp*)
    (("" (expand "guard_sdownsup_vtbi")
      (("" (lemma "check_chev_sup_permission")
        (("" (inst? :subst (st "st!1")) (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((guard_sdownsup_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (check_chev_sup_permission formula-decl nil alaris_th nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil))
   nil))
 (low_sdownsup_vtbi_TCC3 0
  (low_sdownsup_vtbi_TCC3-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (sup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (sup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sup_case_options const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sup const-decl "state" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (guard_sdownsup_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (low_range_vols_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (low_sdownsup_vtbi_TCC4 0
  (low_sdownsup_vtbi_TCC4-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((state_up_vtbi const-decl "ivols" alaris_th nil)
    (state_dn_rate const-decl "irates" alaris_th nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (sup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (sup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sup_case_options const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sup const-decl "state" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (guard_sdownsup_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (low_range_vols_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (sdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_sdown const-decl "boolean" alaris_th nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (low_sdownsup_vtbi 0
  (low_sdownsup_vtbi-1 nil 3659176659
   ("" (skosimp*)
    (("" (expand "guard_sdownsup_vtbi")
      (("" (expand "vtbi_entry_ready")
        (("" (lemma "Simpledownupvtbi")
          (("" (inst? :subst (v "newvtbi(st!1)"))
            (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (mid_range_vols_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (high_range_vols_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (low_range_vols_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (release_sup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (state_dn_vtbi const-decl "ivols" alaris_th nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (state_up_vtbi const-decl "ivols" alaris_th nil)
    (trim_vtbi const-decl "ivols" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Simpledownupvtbi formula-decl nil alaris_reversibility_pattern
     nil)
    (guard_sdownsup_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil))
   shostak))
 (mid_sdownsup_vtbi_TCC1 0
  (mid_sdownsup_vtbi_TCC1-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (sup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (sup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sup_case_options const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sup const-decl "state" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (guard_sdownsup_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (mid_range_vols_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (mid_sdownsup_vtbi_TCC2 0
  (mid_sdownsup_vtbi_TCC2-1 nil 3659171254
   ("" (skosimp*)
    (("" (expand "guard_sdownsup_vtbi")
      (("" (lemma "check_chev_sup_permission")
        (("" (inst? :subst (st "st!1")) (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((guard_sdownsup_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (check_chev_sup_permission formula-decl nil alaris_th nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil))
   nil))
 (mid_sdownsup_vtbi_TCC3 0
  (mid_sdownsup_vtbi_TCC3-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (sup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (sup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sup_case_options const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sup const-decl "state" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (guard_sdownsup_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (mid_range_vols_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (mid_sdownsup_vtbi_TCC4 0
  (mid_sdownsup_vtbi_TCC4-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (state_up_vtbi const-decl "ivols" alaris_th nil)
    (state_dn_rate const-decl "irates" alaris_th nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (sup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (sup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sup_case_options const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sup const-decl "state" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (guard_sdownsup_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (mid_range_vols_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (sdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_sdown const-decl "boolean" alaris_th nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (mid_sdownsup_vtbi 0
  (mid_sdownsup_vtbi-1 nil 3659176853
   ("" (skosimp*)
    (("" (expand "guard_sdownsup_vtbi")
      (("" (expand "vtbi_entry_ready")
        (("" (lemma "Simpledownupvtbi")
          (("" (inst? :subst (v "newvtbi(st!1)"))
            (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (high_range_vols_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (low_range_vols_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (mid_range_vols_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (release_sup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (state_dn_vtbi const-decl "ivols" alaris_th nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (state_up_vtbi const-decl "ivols" alaris_th nil)
    (trim_vtbi const-decl "ivols" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Simpledownupvtbi formula-decl nil alaris_reversibility_pattern
     nil)
    (guard_sdownsup_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil))
   shostak))
 (high_sdownsup_vtbi_TCC1 0
  (high_sdownsup_vtbi_TCC1-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (sup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (sup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sup_case_options const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sup const-decl "state" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (guard_sdownsup_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (high_range_vols_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (high_sdownsup_vtbi_TCC2 0
  (high_sdownsup_vtbi_TCC2-1 nil 3659171254
   ("" (skosimp*)
    (("" (expand "guard_sdownsup_vtbi")
      (("" (lemma "check_chev_sup_permission")
        (("" (inst? :subst (st "st!1")) (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((guard_sdownsup_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (check_chev_sup_permission formula-decl nil alaris_th nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil))
   nil))
 (high_sdownsup_vtbi_TCC3 0
  (high_sdownsup_vtbi_TCC3-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (sup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (sup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sup_case_options const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sup const-decl "state" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (guard_sdownsup_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (high_range_vols_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (high_sdownsup_vtbi_TCC4 0
  (high_sdownsup_vtbi_TCC4-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (state_up_vtbi const-decl "ivols" alaris_th nil)
    (trim_vtbi const-decl "ivols" alaris_th nil)
    (state_dn_rate const-decl "irates" alaris_th nil)
    (ceil_rate const-decl "irates" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (sup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (sup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sup_case_options const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sup const-decl "state" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (guard_sdownsup_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (high_range_vols_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (sdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_sdown const-decl "boolean" alaris_th nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (high_sdownsup_vtbi 0
  (high_sdownsup_vtbi-1 nil 3659176930
   ("" (skosimp*)
    (("" (expand "guard_sdownsup_vtbi")
      (("" (expand "vtbi_entry_ready")
        (("" (lemma "Simpledownupvtbi")
          (("" (inst? :subst (v "newvtbi(st!1)"))
            (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (< const-decl "bool" reals nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (mid_range_vols_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (low_range_vols_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (trim_vtbi const-decl "ivols" alaris_th nil)
    (state_up_vtbi const-decl "ivols" alaris_th nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (state_dn_vtbi const-decl "ivols" alaris_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sup const-decl "state" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (high_range_vols_du const-decl "boolean"
     alaris_reversibility_pattern nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (Simpledownupvtbi formula-decl nil alaris_reversibility_pattern
     nil)
    (guard_sdownsup_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil))
   shostak))
 (low_fdownfup_vtbi_TCC1 0
  (low_fdownfup_vtbi_TCC1-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (guard_fdownfup_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (low_range_vols_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (low_fdownfup_vtbi_TCC2 0
  (low_fdownfup_vtbi_TCC2-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((decrement const-decl "presstime" alaris_th nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (guard_fdownfup_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (low_range_vols_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_fup const-decl "boolean" alaris_th nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (low_fdownfup_vtbi_TCC3 0
  (low_fdownfup_vtbi_TCC3-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (decrement const-decl "presstime" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (guard_fdownfup_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (low_range_vols_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (low_fdownfup_vtbi_TCC4 0
  (low_fdownfup_vtbi_TCC4-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (state_UP_vtbi const-decl "ivols" alaris_th nil)
    (trim_vtbi const-decl "ivols" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (guard_fdownfup_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (low_range_vols_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (decrement const-decl "presstime" alaris_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_fdown const-decl "boolean" alaris_th nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (low_fdownfup_vtbi 0
  (low_fdownfup_vtbi-1 nil 3659177018
   ("" (skosimp*)
    (("" (expand "guard_fdownfup_vtbi")
      (("" (expand "vtbi_entry_ready")
        (("" (lemma "SimpleDOWNUPdvtbi")
          (("" (inst? :subst (d small_step v "newvtbi(st!1)"))
            (("1" (grind) nil nil)
             ("2" (expand "small_step") (("2" (assert) nil nil)) nil)
             ("3" (expand "small_step") (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bigstep const-decl "nat" types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (mid_range_vols_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (high_range_vols_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (trim_vtbi const-decl "ivols" alaris_th nil)
    (state_UP_vtbi const-decl "ivols" alaris_th nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (state_DN_vtbi const-decl "ivols" alaris_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (low_range_vols_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (SimpleDOWNUPdvtbi formula-decl nil alaris_reversibility_pattern
     nil)
    (guard_fdownfup_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil))
   shostak))
 (mid_fdownfup_vtbi_TCC1 0
  (mid_fdownfup_vtbi_TCC1-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (guard_fdownfup_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (mid_range_vols_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (mid_fdownfup_vtbi_TCC2 0
  (mid_fdownfup_vtbi_TCC2-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((decrement const-decl "presstime" alaris_th nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (guard_fdownfup_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (mid_range_vols_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_fup const-decl "boolean" alaris_th nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (mid_fdownfup_vtbi_TCC3 0
  (mid_fdownfup_vtbi_TCC3-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (decrement const-decl "presstime" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (guard_fdownfup_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (mid_range_vols_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (mid_fdownfup_vtbi_TCC4 0
  (mid_fdownfup_vtbi_TCC4-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (state_UP_vtbi const-decl "ivols" alaris_th nil)
    (trim_vtbi const-decl "ivols" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (guard_fdownfup_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (mid_range_vols_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (decrement const-decl "presstime" alaris_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_fdown const-decl "boolean" alaris_th nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (mid_fdownfup_vtbi 0
  (mid_fdownfup_vtbi-1 nil 3659177182
   ("" (skosimp*)
    (("" (expand "guard_fdownfup_vtbi")
      (("" (expand "vtbi_entry_ready")
        (("" (lemma "SimpleDOWNUPdvtbi")
          (("" (inst? :subst (d small_step v "newvtbi(st!1)"))
            (("1" (grind) nil nil)
             ("2" (expand "small_step") (("2" (assert) nil nil)) nil)
             ("3" (expand "small_step") (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bigstep const-decl "nat" types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (high_range_vols_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (low_range_vols_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (trim_vtbi const-decl "ivols" alaris_th nil)
    (state_UP_vtbi const-decl "ivols" alaris_th nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (state_DN_vtbi const-decl "ivols" alaris_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (mid_range_vols_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (SimpleDOWNUPdvtbi formula-decl nil alaris_reversibility_pattern
     nil)
    (guard_fdownfup_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil))
   shostak))
 (high_fdownfup_vtbi_TCC1 0
  (high_fdownfup_vtbi_TCC1-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (guard_fdownfup_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (high_range_vols_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (high_fdownfup_vtbi_TCC2 0
  (high_fdownfup_vtbi_TCC2-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((decrement const-decl "presstime" alaris_th nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (guard_fdownfup_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (high_range_vols_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_fup const-decl "boolean" alaris_th nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (high_fdownfup_vtbi_TCC3 0
  (high_fdownfup_vtbi_TCC3-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (decrement const-decl "presstime" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (guard_fdownfup_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (high_range_vols_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (high_fdownfup_vtbi_TCC4 0
  (high_fdownfup_vtbi_TCC4-1 nil 3659171254 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (state_UP_vtbi const-decl "ivols" alaris_th nil)
    (trim_vtbi const-decl "ivols" alaris_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (guard_fdownfup_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (high_range_vols_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (decrement const-decl "presstime" alaris_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_fdown const-decl "boolean" alaris_th nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (high_fdownfup_vtbi 0
  (high_fdownfup_vtbi-1 nil 3659177283
   ("" (skosimp*)
    (("" (expand "guard_fdownfup_vtbi")
      (("" (expand "vtbi_entry_ready")
        (("" (lemma "SimpleDOWNUPdvtbi")
          (("" (inst? :subst (d small_step v "newvtbi(st!1)"))
            (("1" (grind) nil nil)
             ("2" (expand "small_step") (("2" (assert) nil nil)) nil)
             ("3" (expand "small_step") (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vtbi_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bigstep const-decl "nat" types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (mid_range_vols_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (low_range_vols_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (trim_vtbi const-decl "ivols" alaris_th nil)
    (state_UP_vtbi const-decl "ivols" alaris_th nil)
    (ceil_vtbi const-decl "ivols" alaris_th nil)
    (state_DN_vtbi const-decl "ivols" alaris_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (filter_vtbi const-decl "ivols" alaris_reversibility_pattern nil)
    (high_range_vols_duf const-decl "boolean"
     alaris_reversibility_pattern nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (SimpleDOWNUPdvtbi formula-decl nil alaris_reversibility_pattern
     nil)
    (guard_fdownfup_vtbi const-decl "boolean"
     alaris_reversibility_pattern nil))
   shostak))
 (supsdown_time_TCC1 0
  (supsdown_time_TCC1-1 nil 3659185769 ("" (subtype-tcc) nil nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (time_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (sdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (guard_supsdown_time const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_time const-decl "itimes" alaris_reversibility_pattern nil)
    (ceil_time const-decl "itimes" alaris_th nil)
    (range_time_ud const-decl "boolean" alaris_reversibility_pattern
     nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (supsdown_time_TCC2 0
  (supsdown_time_TCC2-1 nil 3659185769 ("" (subtype-tcc) nil nil)
   ((decrement const-decl "presstime" alaris_th nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (time_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (sdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (guard_supsdown_time const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_time const-decl "itimes" alaris_reversibility_pattern nil)
    (ceil_time const-decl "itimes" alaris_th nil)
    (range_time_ud const-decl "boolean" alaris_reversibility_pattern
     nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_sdown const-decl "boolean" alaris_th nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (supsdown_time_TCC3 0
  (supsdown_time_TCC3-1 nil 3659185769 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (time_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (sdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (guard_supsdown_time const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_time const-decl "itimes" alaris_reversibility_pattern nil)
    (ceil_time const-decl "itimes" alaris_th nil)
    (range_time_ud const-decl "boolean" alaris_reversibility_pattern
     nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (supsdown_time_TCC4 0
  (supsdown_time_TCC4-1 nil 3659185769 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (trim_time const-decl "itimes" alaris_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (time_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (sdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (guard_supsdown_time const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_time const-decl "itimes" alaris_reversibility_pattern nil)
    (ceil_time const-decl "itimes" alaris_th nil)
    (range_time_ud const-decl "boolean" alaris_reversibility_pattern
     nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (sup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (sup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sup_case_options const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_sup const-decl "boolean" alaris_th nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (supsdown_time 0
  (supsdown_time-1 nil 3659185959
   ("" (skosimp*)
    (("" (expand "guard_supsdown_time")
      (("" (expand "time_entry_ready")
        (("" (lemma "simpleupdowntime")
          (("" (inst? :subst (v "newtime(st!1)" d small_step))
            (("1" (grind) nil nil)
             ("2" (expand "small_step") (("2" (assert) nil nil)) nil)
             ("3" (expand "small_step") (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((time_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (release_sup const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (sup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (range_time_ud const-decl "boolean" alaris_reversibility_pattern
     nil)
    (ceil_time const-decl "itimes" alaris_th nil)
    (filter_time const-decl "itimes" alaris_reversibility_pattern nil)
    (per_sup const-decl "bool" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (trim_time const-decl "itimes" alaris_th nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (simpleupdowntime formula-decl nil alaris_reversibility_pattern
     nil)
    (guard_supsdown_time const-decl "boolean"
     alaris_reversibility_pattern nil))
   shostak))
 (fupfdown_time_TCC1 0
  (fupfdown_time_TCC1-1 nil 3659185769 ("" (subtype-tcc) nil nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (time_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (guard_fupfdown_time const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_time const-decl "itimes" alaris_reversibility_pattern nil)
    (ceil_time const-decl "itimes" alaris_th nil)
    (range_time_ud_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (fupfdown_time_TCC2 0
  (fupfdown_time_TCC2-1 nil 3659185769 ("" (subtype-tcc) nil nil)
   ((decrement const-decl "presstime" alaris_th nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (time_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (guard_fupfdown_time const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_time const-decl "itimes" alaris_reversibility_pattern nil)
    (ceil_time const-decl "itimes" alaris_th nil)
    (range_time_ud_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_fdown const-decl "boolean" alaris_th nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (fupfdown_time_TCC3 0
  (fupfdown_time_TCC3-1 nil 3659185769 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (time_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (guard_fupfdown_time const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_time const-decl "itimes" alaris_reversibility_pattern nil)
    (ceil_time const-decl "itimes" alaris_th nil)
    (range_time_ud_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (fupfdown_time_TCC4 0
  (fupfdown_time_TCC4-1 nil 3659185769 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (trim_time const-decl "itimes" alaris_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (time_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (guard_fupfdown_time const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_time const-decl "itimes" alaris_reversibility_pattern nil)
    (ceil_time const-decl "itimes" alaris_th nil)
    (range_time_ud_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (decrement const-decl "presstime" alaris_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_fup const-decl "boolean" alaris_th nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (fupfdown_time 0
  (fupfdown_time-1 nil 3659186227
   ("" (skosimp*)
    (("" (expand "guard_fupfdown_time")
      (("" (expand "time_entry_ready")
        (("" (lemma "simpleUPDOWNdtime")
          (("" (inst? :subst (v "newtime(st!1)" d small_step))
            (("1" (grind)
              (("1" (lemma "divbynratesndx")
                (("1" (inst? :subst (n 10 x "newtime(st!1)" d 1))
                  (("1" (replace -1 2)
                    (("1" (lemma "floor_plus_int")
                      (("1" (inst? :subst (i -1 x "newtime(st!1)/10"))
                        (("1" (replace -1 2)
                          (("1" (replace -19 2)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "small_step") (("2" (assert) nil nil)) nil)
             ("3" (expand "small_step") (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((time_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (divbynratesndx formula-decl nil alaris_reversibility_pattern nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bigstep const-decl "nat" types_and_constants_th nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (release_fup const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (filter_time const-decl "itimes" alaris_reversibility_pattern nil)
    (per_fup const-decl "bool" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (trim_time const-decl "itimes" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (range_time_ud_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (ceil_time const-decl "itimes" alaris_th nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (simpleUPDOWNdtime formula-decl nil alaris_reversibility_pattern
     nil)
    (guard_fupfdown_time const-decl "boolean"
     alaris_reversibility_pattern nil))
   shostak))
 (sdownsup_time_TCC1 0
  (sdownsup_time_TCC1-1 nil 3659185769 ("" (subtype-tcc) nil nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (time_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (sup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (sup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sup_case_options const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sup const-decl "state" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (guard_sdownsup_time const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_time const-decl "itimes" alaris_reversibility_pattern nil)
    (ceil_time const-decl "itimes" alaris_th nil)
    (range_time_du const-decl "boolean" alaris_reversibility_pattern
     nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (sdownsup_time_TCC2 0
  (sdownsup_time_TCC2-1 nil 3659185769 ("" (subtype-tcc) nil nil)
   ((decrement const-decl "presstime" alaris_th nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (time_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (sup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (sup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sup_case_options const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sup const-decl "state" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (guard_sdownsup_time const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_time const-decl "itimes" alaris_reversibility_pattern nil)
    (ceil_time const-decl "itimes" alaris_th nil)
    (range_time_du const-decl "boolean" alaris_reversibility_pattern
     nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_sup const-decl "boolean" alaris_th nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (sdownsup_time_TCC3 0
  (sdownsup_time_TCC3-1 nil 3659185769 ("" (subtype-tcc) nil nil)
   ((odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (time_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (sup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (sup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sup_case_options const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sup const-decl "state" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (guard_sdownsup_time const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_time const-decl "itimes" alaris_reversibility_pattern nil)
    (ceil_time const-decl "itimes" alaris_th nil)
    (range_time_du const-decl "boolean" alaris_reversibility_pattern
     nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (sdownsup_time_TCC4 0
  (sdownsup_time_TCC4-1 nil 3659185769 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (trim_time const-decl "itimes" alaris_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (time_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (sup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (sup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (sup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (sup_case_options const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sup const-decl "state" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (guard_sdownsup_time const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_time const-decl "itimes" alaris_reversibility_pattern nil)
    (ceil_time const-decl "itimes" alaris_th nil)
    (range_time_du const-decl "boolean" alaris_reversibility_pattern
     nil)
    (sdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (sdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (sdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (sdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (sdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (sdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (sdown_case_options const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_sdown const-decl "boolean" alaris_th nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (sdownsup_time 0
  (sdownsup_time-1 nil 3659270676
   ("" (skosimp*)
    (("" (expand "guard_sdownsup_time")
      (("" (expand "time_entry_ready")
        (("" (lemma "Simpledownuptime")
          (("" (inst? :subst (v "newtime(st!1)" d small_step))
            (("1" (grind) nil nil)
             ("2" (expand "small_step") (("2" (assert) nil nil)) nil)
             ("3" (expand "small_step") (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((time_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (trim_time const-decl "itimes" alaris_th nil)
    (state_up_time const-decl "itimes" alaris_th nil)
    (state_dn_time const-decl "itimes" alaris_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_sup const-decl "bool" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (sup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (sup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_sup const-decl "state" alaris_th nil)
    (per_sdown const-decl "bool" alaris_th nil)
    (filter_time const-decl "itimes" alaris_reversibility_pattern nil)
    (ceil_time const-decl "itimes" alaris_th nil)
    (range_time_du const-decl "boolean" alaris_reversibility_pattern
     nil)
    (sdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (sdown const-decl "state" alaris_th nil)
    (release_sdown const-decl "state" alaris_th nil)
    (Simpledownuptime formula-decl nil alaris_reversibility_pattern
     nil)
    (guard_sdownsup_time const-decl "boolean"
     alaris_reversibility_pattern nil))
   shostak))
 (fdownfup_time_TCC1 0
  (fdownfup_time_TCC1-1 nil 3659185769 ("" (subtype-tcc) nil nil)
   ((bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (time_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (guard_fdownfup_time const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_time const-decl "itimes" alaris_reversibility_pattern nil)
    (ceil_time const-decl "itimes" alaris_th nil)
    (range_time_du_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (fdownfup_time_TCC2 0
  (fdownfup_time_TCC2-1 nil 3659185769 ("" (subtype-tcc) nil nil)
   ((decrement const-decl "presstime" alaris_th nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (time_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (guard_fdownfup_time const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_time const-decl "itimes" alaris_reversibility_pattern nil)
    (ceil_time const-decl "itimes" alaris_th nil)
    (range_time_du_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_fup const-decl "boolean" alaris_th nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (fdownfup_time_TCC3 0
  (fdownfup_time_TCC3-1 nil 3659185769 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (time_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (guard_fdownfup_time const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_time const-decl "itimes" alaris_reversibility_pattern nil)
    (ceil_time const-decl "itimes" alaris_th nil)
    (range_time_du_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (fdownfup_time_TCC4 0
  (fdownfup_time_TCC4-1 nil 3659185769 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (trim_time const-decl "itimes" alaris_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (time_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (big_step const-decl "real" types_and_constants_th nil)
    (aug_rate const-decl "pump" pump_th nil)
    (fup_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fup_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fup_case_infusingORholding_rlock const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fup_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (mbags const-decl "nat" types_and_constants_th nil)
    (fup_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fup_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (fup_case_options const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (guard_fdownfup_time const-decl "boolean"
     alaris_reversibility_pattern nil)
    (filter_time const-decl "itimes" alaris_reversibility_pattern nil)
    (ceil_time const-decl "itimes" alaris_th nil)
    (range_time_du_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (decrement const-decl "presstime" alaris_th nil)
    (fdown_case_holding_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusing_NOTrlock const-decl "state" alaris_th nil)
    (fdown_case_infusingORholding_rlock const-decl "state" alaris_th
     nil)
    (fdown_case_dispvtbi_vtmode const-decl "state" alaris_th nil)
    (fdown_case_vtbitime_vttmode const-decl "state" alaris_th nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_bagmode const-decl "state" alaris_th nil)
    (fdown_case_dispvtbi_tbagmode const-decl "state" alaris_th nil)
    (dpdtls const-decl "nat" types_and_constants_th nil)
    (fdown_case_options const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (per_release_chevron const-decl "boolean" alaris_th nil)
    (per_release_fdown const-decl "boolean" alaris_th nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (fdownfup_time 0
  (fdownfup_time-1 nil 3659270891
   ("" (skosimp*)
    (("" (expand "guard_fdownfup_time")
      (("" (expand "time_entry_ready")
        (("" (lemma "SimpleDOWNUPdtime")
          (("" (inst? :subst (v "newtime(st!1)" d small_step))
            (("1" (grind)
              (("1" (lemma "divbynrealpndx")
                (("1" (inst? :subst (n 10 x "newtime(st!1)" d 1))
                  (("1" (replace -1 2)
                    (("1" (lemma "ceiling_plus_int")
                      (("1" (inst? :subst (i 1 x "newtime(st!1)/10"))
                        (("1" (replace -1 2)
                          (("1" (replace -19 2)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "small_step") (("2" (assert) nil nil)) nil)
             ("3" (expand "small_step") (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((time_entry_ready const-decl "boolean" alaris_reversibility_pattern
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (small_step const-decl "real" types_and_constants_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     alaris_reversibility_pattern nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}"
     alaris_reversibility_pattern nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (maxtime formal-const-decl
     "{maxtime: posnat | maxtime > timeout AND maxtime >= maxinfuse}"
     alaris_reversibility_pattern nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (shorttimeout formal-const-decl
     "{shorttimeout: posnat | shorttimeout < timeout}"
     alaris_reversibility_pattern nil)
    (< const-decl "bool" reals nil)
    (timeout formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}"
     alaris_reversibility_pattern nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (maxrate formal-const-decl "posnat" alaris_reversibility_pattern
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (ibagscursor type-eq-decl nil types_and_constants_th nil)
    (abags type-eq-decl nil types_and_constants_th nil)
    (steprate type-eq-decl nil types_and_constants_th nil)
    (steptime type-eq-decl nil types_and_constants_th nil)
    (stepvol type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (emodes type-decl nil types_and_constants_th nil)
    (ifunctions type-decl nil types_and_constants_th nil)
    (imid type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (o_menu type-eq-decl nil types_and_constants_th nil)
    (presstime type-eq-decl nil types_and_constants_th nil)
    (qcurse type-eq-decl nil types_and_constants_th nil)
    (iline type-decl nil types_and_constants_th nil)
    (chev_buttons type-decl nil types_and_constants_th nil)
    (state type-eq-decl nil alaris_th nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (divbynrealpndx formula-decl nil alaris_reversibility_pattern nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (ceiling_plus_int formula-decl nil floor_ceil nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bigstep const-decl "nat" types_and_constants_th nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ceil_time const-decl "itimes" alaris_th nil)
    (range_time_du_f const-decl "boolean" alaris_reversibility_pattern
     nil)
    (switchedon? const-decl "bool" alaris_reversibility_pattern nil)
    (maxpress const-decl "nat" types_and_constants_th nil)
    (no_button_down const-decl "bool" alaris_th nil)
    (drate const-decl "nat" types_and_constants_th nil)
    (dvtbi const-decl "nat" types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil)
    (dtime const-decl "nat" types_and_constants_th nil)
    (dnewvtbi const-decl "nat" types_and_constants_th nil)
    (dnewtime const-decl "nat" types_and_constants_th nil)
    (dnewrate const-decl "nat" types_and_constants_th nil)
    (per_chevron const-decl "bool" alaris_th nil)
    (per_fup const-decl "bool" alaris_th nil)
    (decrement const-decl "presstime" alaris_th nil)
    (trim_time const-decl "itimes" alaris_th nil)
    (state_UP_time const-decl "itimes" alaris_th nil)
    (resetElapsed const-decl "pump" pump_th nil)
    (fup_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fup const-decl "state" alaris_th nil)
    (release_key const-decl "state" alaris_th nil)
    (release_fup const-decl "state" alaris_th nil)
    (per_fdown const-decl "bool" alaris_th nil)
    (filter_time const-decl "itimes" alaris_reversibility_pattern nil)
    (state_DN_time const-decl "itimes" alaris_th nil)
    (fdown_case_vtbitime_ttmode const-decl "state" alaris_th nil)
    (fdown const-decl "state" alaris_th nil)
    (release_fdown const-decl "state" alaris_th nil)
    (SimpleDOWNUPdtime formula-decl nil alaris_reversibility_pattern
     nil)
    (guard_fdownfup_time const-decl "boolean"
     alaris_reversibility_pattern nil))
   shostak)))

